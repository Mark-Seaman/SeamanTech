# module_name/views_dt.py
# Data_Type views for basic operations


#############################################################################
# DO NOT EDIT THIS FILE
# This Code will be replaced by the code generator
#############################################################################

from django.views.generic import ListView, DetailView
from django.views.generic.edit import CreateView, UpdateView, DeleteView
from django.core.urlresolvers import reverse_lazy
from django.contrib.auth.decorators import login_required

from data_type_model import Data_Type
from data_type_query import query_data_type, get_data_type


# Basic list view with using a template
class Data_TypeList(ListView):
    model = Data_Type
    template_name = 'data_type_list.html'

    # Filter the list of choices
    queryset = query_data_type()

    # Use the request user to match the items
    #def get_queryset(self):
    #    return Data_Type.objects.filter(name=self.request.user.username)


# Basic detail view
class Data_TypeDetail(DetailView):
    model = Data_Type
    template_name = 'data_type_detail.html'

    # Call the base implementation first to get a context
    def get_context_data(self, **kwargs):
        context = super(Data_TypeDetail, self).get_context_data(**kwargs)
        id = context['object'].pk
        context['value_list'] = get_data_type(self.request.user,id)
        return context


# Create view
class Data_TypeAdd(CreateView):
    model = Data_Type
    template_name = 'data_type_edit.html'


# Update view
class Data_TypeEdit(UpdateView):
    model = Data_Type
    template_name = 'data_type_edit.html'


# Delete view
class Data_TypeDelete(DeleteView):
    model = Data_Type
    success_url = reverse_lazy('data_type_list')
    template_name = 'data_type_delete.html'

