== Application Deployment

The issues, tools, and techniques for speeding up application deployment.


[quote]
____

Rock on DUDE.
____



=== Versioning

Version control is critical to whole deployment process.  Without proper 
management of the recipes for deployment the entire operation relies upon the
specific actions of the staff. To faithfully remember every detail of how to
keep the system running properly.  Humans are not good at remembering things,
so all of these tasks should rely completely on computer automation.

Version control is absolutely essential to automation. Each time a set of tasks
is executed it must produce the exact same result.  This requires writing 
software for every task, which has an entire history.  A version control system
must be used to allow explicit references to that history.  You should be able 
to retrace the exact steps of what happened last Tuesday at 10:00.  Without
this degree of rigor your operation will become extremely unpredictable.

There are several good version control systems in widespread use.  For the
purpose of this discussion I'll refer to all of these as Git.  You should be
using a tool that has the same attributes as Git (such as Subversion, or 
Mercurial). 

All automation should be built on top of Git. Control the server environments 
and configurations by using branches.  Merge branches together to manage the
project work-flow. Make sure that all of the deployment steps are built into
fully automatic tools. This will ensure that all deployment is done exactly the
same every time. This gives you a history that can be repeated to track down 
and debug failures.


==== Everything is Under Version Control

Proper use of Git requires that you truly understand the source code in your 
project.  There are many files that are combined together to create a product.
Some of these files are built during a build process.  By definition, these are
not source code since they are built by you. Therefore, they should not be
managed within Git.  Use *.gitignore* to skip over these files.

There are also tools that are required to build your project.  Any tool that 
will not be readily available (by version number) should be added to Git.  Don't
take a chance at not being able to rebuild your product due to a missing tool.
A lot of the tools that we use help us set up and configure new machines. Any
files that are necessary for Configuration Management (CM) must be a part of the
source code for your project.

The specific versions of tools required to build your product should either be
tracked within your Git repository or available from some official source that
is guaranteed to be around two years from now.  Make a conscious decision about
these things rather than assume that something will be there. Create
reproducible results by tracking everything that you need to build the entire
world from scratch.
  

==== Standard Branch Policy

Using branches within your Git repository can clarify many details related to 
work-flow.  Throughout the development there are different uses for branches.

* Experiment with new ideas that may be incorporated later.
* Stage the integration of different pieces of code that rely on each other.
* Isolate responsibilities (eg. production, staging, test).
* Use branches to stabilize changes during releases.

It is important to have a solid branching policy.  This helps all of the
engineers know how to work together in an effective manner.  The first policy to
establish is how to slow down development close to a release so that
unintentional  features or untested code is not accidentally released.  A numbered
branch should be created for each major and minor release that is done.

This allows the master branch to continue moving rapidly with lots of commits
while the release branches begin to be restricted.  Only changes that are
properly tested and reviewed are added to the release branch.  After the code
enters production the rate of change should slow even further.  Using a branch
allows some change to occur but this should be tightly controlled.

In addition to release branches it is a good idea to use branches to establish
responsibilities for the work-flow.  For example, Staging, Test, and Dev branches
can be used to mark code that is a different quality levels.  As more testing
is applied the code is promoted to the next level by merging the branches together.
This lets you establish gateways or thresholds that must be passed in order to
go to the next level.

Branches are also used to experiment with ideas that are not quite ready to 
put into the mainstream development.  These may be built around specific features
or used as integration branches for mutually dependent components that rely on
each other.  It is best to integrate changes before they are merged into the
master branch.


<hr><p><a href="StartReading">Read More</a></p><hr>
