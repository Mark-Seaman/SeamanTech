== Managing Your Release Cycle

{{ image_water }}


Deciding when, what, and how to release the software is one of the most
significant decisions that can be made on a project.  Waiting too long will
clearly hurt the business and lose customers. Releasing too early can also
cause disaster for the project.  There is a clear sweet spot for when to 
release software.

What is the rationale for release?  Do we just release the code because a date
goes by and our shareholders are restless, or is there a better way to choose
the introduction date?  We need to control two major factors that are both
embedded in the software itself: functionality, and quality.  The features must
be at an acceptable level to meet the market demand or it makes no sense to
release the product.  Likewise, the quality must be above some level that makes
it acceptable.  When both of these goals have crossed a threshold then it is 
time to release. Any further delay will be hurt the business.


=== Controlling Scope

Unbounded scope on a project can spell disaster.  The project scope is set by
the breadth and depth of the problems that are solved. The feature set can be
minimal or large.  And each feature can be simple or glorious.  Larger scope
means larger complexity in the resulting solution.  If you solve lots of problems
and create sophisticated solutions for each one then the project will grow in
size.  Complexity is non-linear in its impact. Doubling the scope will cause
the effort required to more than double.  Sometimes the impact is far more than
double.  Scope by nature is unbounded.  We are all creative and can thing of 
many problems that need solving.


==== Leading cause of late projects

Most of the projects that I have worked on over the last 35 years have had a
significant struggle with scope creep.  One more feature here and one better
solution there, will add up over time.  Unless a budget is set and ruthlessly
adhered to the project will inflate. No single issue has sunk more projects
than trying to solve too many problems.  When the eyes are bigger than the 
stomach then you will get indigestion. 

Each feature that is added must justify its worth.  Every feature that does not
add real value to the customer should be eliminated.  This is half of the equation.
The other half is that every feature planned is match with a reasonable level
of engineering. A project that is trying to build a million dollar system for a
hundred-thousand will never leave the launch pad.  Features must be carefully
prioritized and realistic relative to the investment.

