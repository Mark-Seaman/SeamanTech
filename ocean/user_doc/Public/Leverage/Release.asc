** Managing Your Release Cycle

{{ image_water }}


Deciding when, what, and how to release the software is one of the most
significant decisions that can be made on a project.  Waiting too long will
clearly hurt the business and lose customers. Releasing too early can also
cause disaster for the project.  There is a clear sweet spot for when to 
release software.

What is the rationale for release?  Do we just release the code because a date
goes by and our shareholders are restless, or is there a better way to choose
the introduction date?  We need to control two major factors that are both
embedded in the software itself: functionality, and quality.  The features must
be at an acceptable level to meet the market demand or it makes no sense to
release the product.  Likewise, the quality must be above some level that makes
it acceptable.  When both of these goals have crossed a threshold then it is 
time to release. Any further delay will be hurt the business.


*** Controlling Scope

Unbounded scope on a project can spell disaster.  The project scope is set by
the breadth and depth of the problems that are solved. The feature set can be
minimal or large.  And each feature can be simple or glorious.  Larger scope
means larger complexity in the resulting solution.  If you solve lots of problems
and create sophisticated solutions for each one then the project will grow in
size.  Complexity is non-linear in its impact. Doubling the scope will cause
the effort required to more than double.  Sometimes the impact is far more than
double.  Scope by nature is unbounded.  We are all creative and can thing of 
many problems that need solving.


**** Leading cause of late projects

Most of the projects that I have worked on over the last 35 years have had a
significant struggle with scope creep.  One more feature here and one better
solution there, will add up over time.  Unless a budget is set and ruthlessly
adhered to the project will inflate. No single issue has sunk more projects
than trying to solve too many problems.  When the eyes are bigger than the 
stomach then you will get indigestion. 

Each feature that is added must justify its worth.  Every feature that does not
add real value to the customer should be eliminated.  This is half of the equation.
The other half is that every feature planned is match with a reasonable level
of engineering. A project that is trying to build a million dollar system for a
hundred-thousand will never leave the launch pad.  Features must be carefully
prioritized and realistic relative to the investment.


**** Cycle of increasing scope

A long project cycle begs for a huge scope to cover the investment.  If you
believe that it takes ten engineers a year to write a web application then you
are planning to invest 20,000 hours in the project with a huge budget.  There
better be a giant payoff at the end of this project. So the cycle begins. How
can we spec enough functionality to make this large investment?

Because we can imagine a glorious system that will justify our effort, we scope
the project to be the greatest thing that we can imagine.  A list of requirements
is published that is twice what the team can handle.  Then after several rounds
of hostile negotiation between marketing and R&D the project is reduced in scope
to 150% of what the team can handle.

Act three of the play involves the developers actually building the huge feature
list and discovering that the stated requirements were a small fraction of 
what was actually needed.  This project will inevitably slip by more than 50%
of its schedule.  This results in both a functional and quality shortfall with
a matching budget overrun.  This scenario happens every day and explains the
dismal state of software development.


**** Unreasonable expectations

But the above scenario is far from inevitable. In fact it is completely
avoidable. The fundamental problem is that there is no feedback to force an
alignment of what is desired with what is possible. In this void unreasonable
expectations flourish. It is time to change the conversation entirely. The
scope must be based on a calculation rather than a vague desire.

The functionality and schedule must be posed as a question rather than a fixed
answer being assumed.  Projects end in a death march because the project is
over-constrained. The solution to the puzzle is a null set. This approach can
be replaced with a very different approach that will produce far better results.

The project scope must be posed as a question.  Management starts by setting
the end date and the core functionality of the system along with the staffing
that can be allocated to the project.  Given these constraints the developers
must produce the best plan to meet the actual business needs.

At the beginning of a project the management typically believe that all of the
product requirements are thoroughly understood.  In most projects about 50% of
requirements can be articulated up front.  The rest must be discovered over the
course of the project. This means that half of all problems that must be 
solved are not even known at the inception of the project. Therefore scope
must be controlled throughout the entire project life-cycle.  It can not be
assigned by the stakeholders without dire consequences. 


