== Test Leverage

{{ image_water }}

[quote, ~ Anonymous]
____
“If you don’t like testing your product, most likely your customers won’t like to test it either.” 
____

=== Testing - Traditional or Practical

There appears to be a gap between the traditional ideas of testing and quality
assurance and the very specific methods and techniques taught by the advocates
of Test-Driven Development. The classic discussions focus on planning and
building large documents to capture the Test Plan, Risk Analysis, Test
Strategy, Test Tools, Test Cases and Defect Tracking. The primary artifacts
generated are documents and the core testing activities aren't automated.
Large numbers of people are hired to interact with the system.

The other main school of thought is based in the principles of Agile Software
Development. The key ideas here deal with automated testing and unit test
frameworks. These are used throughout the implementation phase and serve to
ensure the quality long after the implementation is complete. I believe that
these concepts are the foundation that every testing effort should build on.

Test-Driven Development, in the form most often taught, assumes that you begin
using the correct testing approach at the beginning of the project. Tests are
built as the product is built. The two parallel infrastructures validate each
other by confirming all of the embedded assumptions. Development with two
parallel structures that are mutually reliant on one another is difficult to
achieve after the fact.

What if you are given a million lines of legacy code? Is it really practical
to tell your stakeholders that your first job is to produce a million lines of
test code so that you can do reliable refactoring? Of course not! We need a
method to apply the principles of TDD to existing systems.

This chapter attempts to fill the gap between the ideals of TDD and the
practical realities of legacy software. We will remain true to the ideals of
rigorous testing while making it easy to add and maintain tests that utilize
existing parts of the system. In order to achieve the maximum leverage, we
need test strategies that can be used effectively for both greenfield
applications and legacy code.


=== Expected Results

Traditional testing techniques have many problems that end up compromising the
overall test effort. In the previous chapter we introduced a new style of
testing that works well for test-driven development. We will continue to build
