== Architectural Leverage




[quote, ~ Frank Gehry]
____

"Architecture should speak of its time and place, but yearn for timelessness".
____


High quality architecture is the direct result of applying good design
principles and practices to solve the problems at hand. Without a great
architecture you have nothing to leverage. If the old solution barely meets the
needs then it can't be extended to meet a different set of needs.

If you don't trust the current architecture then don't try to leverage off of it
to build something new. You will invest far more time than it is worth, and when
you are done, you will have something that is no better than the first version.

Building systems from a fresh perspective, with the knowledge of the old system,
is far faster than trying to convert an old system into a new one. A system 
that costs 1000 hours to build can be rebuilt from scratch in around 300 hours.
This is because you already have solutions to 70% of the problems you will 
face. Design leverage is often far more powerful than code leverage.

The quality of the software architecture directly depends on the strength of the
interfaces. Design is all about the interfaces between the components. A
reusable architecture has well-encapsulated components and standard interactions
between those components.

A poor architecture has very weak components and lots of complex and custom
interactions between them. A weak architecture doesn't even meet the needs
of its initial use and breaks entirely when you try to extend the business
needs to a second generation solution.


=== Need for Reusable Architecture

Leverage of the design is perhaps the most important kind of reuse that is
possible. Reusing key design elements enables other types of reuse throughout
the life cycle. However, when designs can't be applied to new development,
opportunities to build on other elements are thwarted. When the designs can be
recycled it is quite natural to use the product definition, technology,
implementation components, and tests to the fullest extent.

Maximizing the design leverage is the best way to optimize the overall leverage
of the project. Pay special attention to the way that each generation of project
can be built upon the design of its predecessor. High reuse of the design can
lead to ten times the productivity and one tenth of the cost. The stakes are
high so the effort spent to develop greater skill in this area will be well
rewarded.


==== Design is the Heart of Software

Design is the essence of software development. Engineers solve problems by
creating solutions that are implementations of design ideas. The code embodies
the designs and applies it to the real world. The underlying technology supports
the design but doesn't solve the problem directly.

A weak design will lead to a poor implementation and an inappropriate use of
technology. However, a strong design can produce a great product that will stand
the test of time. A good design is not only critical to the current solution,
but can be used as the basis of many other future products. Design leverage
lets us get long-term benefits from each design that we create.

Leverage is a test of your design quality. Weak designs can't be effectively
reused. The assumptions that were used in creating the original design won't
hold for other applications. It is necessary to modify the existing design to
accommodate new assumptions. This is where the design quality is revealed. Poor
designs are rigid and can't be adapted to new use. Any design that can be easily
applied to new situations is strong, by definition.


==== How Much Do You Leverage?

All of us want to achieve a high degree of leverage of our designs. Why build  a
system that we had no intention of extending? But the reality is far from
encouraging. We often get far less leverage than we expect. Here are several
viewpoints that are useful to determine the design leverage that you are
currently achieving on your projects.

Engineering is done to solve problems. Each project solves a collection of
problems. An inventory of solutions can be used to solve the next round of
problems that need to be solved. One way to look at your leverage is to evaluate
how many new problems are solved by applying existing solutions and how often
you need to start from scratch.

Another way to evaluate your leverage is to compare the software budget required
to build a new version of your product. This is a good indicator of the overall
leverage since leverage is directly tied to the amount of design reuse.

A third way to think about design leverage is to measure the size of your
inventory of design tricks. Do you have a substantial and growing list of
solutions for common problems? Are these applied to new problems by each team
member or are they disregarded? On the typical project, how much new learning
must occur? Each of these unique viewpoints can be useful to assemble an
accurate picture of your design leverage.
<hr><p><a href="StartReading">Read More</a></p><hr>
