** Monitoring operations

{{ image_water }}



To control our applications in the wild we must gain a thorough understanding
of how they behave. A system is design to operate in a certain way but is it
really doing what we expect?  Monitoring is how we find out. How desire is
get an accurate picture for how the applications function in live usage.  This
is different than static analysis which looks for issues in the code itself.
Monitoring is about watching what is happening in the real world and detecting
patterns that require attention.


*** The metrics mindset

Leverage requires a deep system understanding.  Measuring things is the fastest
way to gain that understanding.  Observing the system in operations and extracting
data can yield profound insights.  It can also validate or refute the
assumptions and beliefs that we have. The scientific mindset lets us make
hypotheses and experiments to study the system.


**** Test everything that you care about continuously

Our goal is to ensure that everything is running exactly as we intend to have
it run.  Even in a small system this will entail check several hundred things
continuously.  Obviously this cannot possibly be done manually. So instead
we invest in automation to monitor everything that we care about.  

Each tap point for monitoring is really the same as the test cases that we built
in the chapter on testing. We will use the diff test framework to check every
test against the approved answer.  This makes it extremely easy to write and
maintain tests.  Every test case should be one or two lines of code.

Here are some examples of the types of tests that you will have.  Even without
knowing anything about the problem domain or implementation language these 
scripts are easy to read and understand.

```python

def check_disk_space():
    system ('df | ok_space')


def temp_files():
    system ('find | limit_lines 1800 2000')


def reports_filed():
    from reports import report_count
    num_reports = report_count()
    if num_reports < 100:
        print("Not enough reports "+str(num_reports))


def process_running():
    system("ps -ef | grep apache | line_count 2" )

```


**** Bad events should trigger automatic escalation

The diff testing framework will save many hours in constructing new tests.
Instead of carefully thinking through what should happen you can build test
cases that generate output. Then you can decide if the current answer is 
acceptable.  You can also let tests be extremely noisy at first and then silence
them very selectively.

This lets you spend effort on the things that need attention and ignore all of
the things that produce the same stable output for every run.  The effectiveness
of this approach in the real world can not be overstated.  Every test can be 
created in less than five minutes and repeated failures can addressed in a 
few minutes as well.

Every condition that needs attention should get it.  No tests that fail should
be ignored.  The answer is typically to filter some of the output before the
check is being done.  A common design pattern is to make all tests only output
exceptional behavior.  This is not required but make work well for you.  All
test cases would be written to remain completely silent in the healthy case and
only generate output that should get attention.

In practice you will produce well over a thousand test cases.  I recommend 
caching the results of long running tests.  This allows you run the tests
often without an undue burden being placed on the system.  Only occasionally
will the long running tests be executed.  Most often the cached result will
simply offer up the last answer.  Note that failing test answers are not
cached so that failing tests are run repeatedly until they pass.


**** Operational failure should result in new test conditions

No system is perfect.  There will be situations that happen and are missed
by the current test cases. Every time this occurs it indicates a testing weakness.
Your testing boat has a whole in the hull.  Patch it soon so that when the
problem recurs you will detect it immediately.

Over time your system will become very robust.  It will be constantly monitoring
