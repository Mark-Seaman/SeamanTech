== Monitoring operations

{{ image_water }}



To control our applications in the wild we must gain a thorough understanding
of how they behave. A system is design to operate in a certain way but is it
really doing what we expect?  Monitoring is how we find out. How desire is
get an accurate picture for how the applications function in live usage.  This
is different than static analysis which looks for issues in the code itself.
Monitoring is about watching what is happening in the real world and detecting
patterns that require attention.


=== The metrics mindset

Leverage requires a deep system understanding.  Measuring things is the fastest
way to gain that understanding.  Observing the system in operations and extracting
data can yield profound insights.  It can also validate or refute the
assumptions and beliefs that we have. The scientific mindset lets us make
hypotheses and experiments to study the system.


==== Test everything that you care about continuously

Our goal is to ensure that everything is running exactly as we intend to have
it run.  Even in a small system this will entail check several hundred things
continuously.  Obviously this cannot possibly be done manually. So instead
we invest in automation to monitor everything that we care about.  

Each tap point for monitoring is really the same as the test cases that we built
in the chapter on testing. We will use the diff test framework to check every
test against the approved answer.  This makes it extremely easy to write and
maintain tests.  Every test case should be one or two lines of code.

Here are some examples of the types of tests that you will have.  Even without
knowing anything about the problem domain or implementation language these 
scripts are easy to read and understand.

```python

def check_disk_space():
    system ('df | ok_space')


def temp_files():
    system ('find | limit_lines 1800 2000')


