== Code Leverage

{{ image_water }}


[quote, ~ Peter Drucker]
____

"There is nothing so useless as doing efficiently that which should not be done at all".
____


The actual activity of writing code is where implementing best practices across
an entire team can rapidly multiply your leverage on any project. By focusing on
immediate business goals and using standardized tools, your team can rapidly
turn out the highest quality software time after time. Now we'll dig into the
details of that endeavor.


=== Tasks within Code Construction

Earlier we discussed the different development tasks that must be balanced
throughout the project. These tasks make up the essential work of
implementation. Coding requires four different types of fundamental activities.
Each type of task is built on a unique frame of reference. As code is built
these viewpoints must be expressed and held in balance throughout the
development cycle.

* Test - verify functionality
* Fix - repair defects and errors
* Extend - new features
* Improve - structure and performance

[[dev_tasks]]
.Development Tasks Must be Balanced
image::../images/Dev_Tasks.png['Development Task Types']

If any one of these tasks is neglected you will build up technical debt. This
can have disastrous results on a project unless it is corrected. Each of these
types of work has some key best practices associated with it. Maximum leverage
is achieved by solving the key problems in each area. Be careful to budget your
time to service each of these area with an equal amount of effort.

Each of these core perspectives has its own form of technical debt which results
from neglecting the required work. Each task also has its own best practices
that prevents the accumulation of debt. This chapter will explore each task and
show you how to overcome the related challenges.


=== Test - Verify Functionality
