* Why Reuse Software? *                                       -*-muse-*-

---

**Economics of Software Reuse**

Software systems are very expensive to build and maintain.  Yet once a system is put in place it immediately starts to decay.  The world around the software continuously changes and the software must be modified to keep working properly.

As each new change is injected into the software minor flaws begin to appear in the system.  At first these problems are simply minor irritations.  But over time they threaten the system integrity.   This process of decay is called bit rot and is similar to the effect that termites have on wooden structures.

The purpose of this book is to teach you how to prevent bit rot from destroying your software investment.  By applying the techniques taught here you will be able to slow and even turn back the effect of bit rot in your system.  With discipline and attention to the right details, you can have software that actually improves over time.

Imagine the economic impact of building software that lasts for years rather than months.  What could you do if all your investment went into new functionality, rather than replacement of the functionality that you already have.

---

**Learning from Reality**

The techniques that you read about here are from the school of hard knocks.  Reality is a great teacher.  The lessons have been learned through participating in around 100 product introductions.  The projects covered a wide range of team sizes, company sizes, geographically-distributed team organizations, and industries.

Dozens of different technologies were used over the course of the 35 years represented by these projects.  Every project has its own unique attributes and limitations.  But similarities between projects are quite remarkable.

What I ultimately find most interesting, is the different responses that occurred on each project to the same pressures.
The skill of the development teams varied greatly.  And the success of the project is often tied to the practices that the team adopts.  We will look at patterns of behavior that separate the successful projects from the failed ones.  Are there lesson that can be learned and applied to increase our level of success?

---

**Lifecycle Phases**

This book highlights the four key areas that will determine the success of your next project.  I invite you to look backward on your last project to evaluate the truth of these ideas.  Were some areas neglected, causing you unreasonable pain?  Or did you master each of these areas?  Also be thinking about the current project you are working on.  What changes would you most like to see?

We will be exploring the four main stages of the software lifecycle to examine the key issues that determine reusability of software systems.  Tradeoffs made within each stage can prevent any reuse from happening.  In order to leverage software effectively you must address the issues that would block it.  Successful organizations build the entire project to support the tools and practices that maximize leverage.

 * **Definition** - how your planning process affects leverage
 * **Design** -  how to create a reusable architecture
 * **Implementation** - how to build reusable components
 * **Test** - how testing can be strategic

Change is inevitable!  Letâ€™s anticipate it and build system that thrive over time.
