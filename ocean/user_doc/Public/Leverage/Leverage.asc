** The Leverage Principle

{{ image_water }}


[quote, ~ Archimedes of Syracuse]
____
"And with a lever I will move the whole world."
____



*** Software is Central to Modern Life

In 2011, Marc Andreessen famously stated that "Software is Eating the World".
Every industry has experienced a remarkable transformation due to the growing
dominance of software. Entire industries like bookstores, music stores, movie
studios, newspapers, photography, and financial services, have been replaced by
software-based services. Software is no longer a secondary player - it's the
main show and will dictate whether your business succeeds or fails. Business now
runs 24/7 and software is at the very heart of this amazing revolution.

Great software systems create business success - they can automate repetitive
tasks and free up resources to continue innovating in other areas. Humans are
great at solving problems and computers are great at running those solutions.
With each problem that is solved, more opportunity is created to deliver greater
value. The business now has a solution that can keep delivering value for an
ever decreasing cost. Resources and attention can now pivot to solving the next
round of business problems. Innovation spawns more innovation and forms a
productive feedback loop.

The reverse is also true - inadequate software can easily destroy an otherwise
healthy business. Because software is so central to every aspect of business
today, a company can be crippled by software systems that don't meet the
business needs.

Think about the national healthcare initiative, healthcare.gov, and its high
profile flop. Thousands of hours of planning and development costing millions of
dollars culminated in a failed deployment of a web application. The failure
created extra scrutiny, loss of credibility, and several key leaders lost their
jobs.

This drama plays out every day in every industry. Companies, governments, and
other organizations that don't understand how to develop software systems that
match critical business needs are doomed to extinction. The answer to this
threat is to apply the leverage principle to every facet of software development
and operations.


**** Importance of Leverage


One definition of leverage is using something to maximum advantage. The goal for
every software development project should be to utilize every asset - everything
you've previously built, everything your team learned about the business needs,
every skill and bit of expertise in a technology platform. Utilize these
previous investments rather than creating them new every single time. No one
can afford to rebuild infrastructure that has already been created.

[quote]
____
**The Leverage Principle** -
Best practices produce higher quality software which encourages reuse.
____


Software development is expensive and it is far more expensive than it needs to
be. To build a software system requires solving thousands of specific
engineering problems. Each of these problems require some minimum amount of
effort. This effort is the essential problem cost.

But the cost of the actual solution can far exceed the essential cost.
Inefficiencies in the development process introduce work that doesn't actually
contribute toward the project goals. This cost must be viewed as waste. As much
as 50% of the ultimate cost of any software development project could be
characterized as waste. Eliminating this waste can allow you to deliver far more
business value with the same resources.


**** Cost and Leverage

There is a direct relationship between the incremental development cost  (in
money and time) and the amount of leverage that is achieved. The following
graph shows how the cost of the next release can be contained by reusing the
understanding from the existing system. High leverage levels require a lot of
discipline that must be acquired over time. But even modest amounts of leverage
can have a dramatic impact on the overall development cost.

You might think that it is hard to achieve high levels of leverage on each new
product cycle, but the opposite is actually true. The leverage is determined by
the quality of the software development process which is driven by the extent of
best practice usage. There is a compounding effect that applies here - better
processes enable a greater rate of improvement. Each generation will see a
reduction in the cost based on the developed skill and discipline of the team.
There is a double benefit here. Improving software processes produces better
software in the short term, but it also reduces the cost in future development.

Teams that have already achieved a high amount of leverage will continue to
improve their processes at a rapid rate. Organizations that are struggling with
the fundamentals of software engineering will find it difficult to realize the
