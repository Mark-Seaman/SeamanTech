== Learning




[quote]
____
I am always doing that which I cannot do, in order that I may learn how to do it.
Pablo Picasso

Try to learn something about everything and everything about something.
Thomas Huxley

The noblest pleasure is the joy of understanding.
Leonardo da Vinci

Intellectual growth should commence at birth and cease only at death.
Albert Einstein

As our circle of knowledge expands, so does the circumference of darkness surrounding it.
Albert Einstein
____



=== Learning is a Strategic Capability

Many companies act like learning is a necessary evil.  They screen rigorously
for specific technology skills when hiring. The underlying belief is that
knowledge that a new person has is what they will need to be successful. The
truth is what an engineer knows is less important than their ability to learn
quickly. Each person only knows a fraction of the skills that they will need two
years from now. Technology moves so fast that the half-life with specific
technology skills is probably about eighteen months.  Any engineer that stops
learning is on a rapid decline in their career.

Current knowledge is important because it offers a base of understanding that
can be built onto. However, learning allows a person to grow into whatever
situation they need to. How often have you added a new person to a team in time
for a change in the project that rendered their specific skill unnecessary. I
would rather hire a smart and motivated person than a knowledgeable one.

There are two primary skills from which all other engineering skills emanate.
Analytical thinking and problem solving allow engineers to tackle and solve
complex engineering problems.  But it is the ability learn quickly and 
effectively that fuels all the other skills that are vital to a successful
career.  What you know now is not nearly as critical to your success as your
ability to learn.


==== Managing knowledge to optimize results

So what does learning have to do with software leverage?  If you have ever been
responsible for completing a project using a team of engineers that were not
adequately prepared for the task then you know the resulting nightmare. Budgets
and expectations are set assuming a skilled staff. When key skills are missing
then sufficient time must be budgeted to allow for the required learning.

Making blind assumptions about the skill of a team is courting disaster.
The skills needed on a project need to be correlated with the skills that are
possessed by the team. When a gap is discovered a plan must be created to allow
the necessary learning to take place.  This is what we mean by skill management.
It is simply comparing the need to the asset and figuring out how to close the
gap.

In order to leverage software we need to have skilled engineers that are 
comfortable with the technology that they are using. The depth of knowledge
about the technology will prevent blunders when building the solutions. And
the breadth of understanding will help to apply the right solutions. Both
breadth and depth of knowledge will prevent technical debt of many types.
High leverage of software is only possible if the residual technical debt 
remains low.  Therefore the technical skill of the team will have a direct
correlation to the possible leverage.


==== New era with new challenges

Changes from the internet are fundamental, not incidental.  The growth and
maturity of the information available online has changed everything.  These
changes are here to stay and will only accelerate with time. This must change
the way that organizations think about the entire process of learning. This
chapter will explore the implications of learning and training in an internet
age.

Programming problems are solved instantly.  A five-minute search on Stack
Overflow and Google will answer any technical question an engineer might have.
Thoughtful articles and tutorials will teach us how to apply a technology to a
specific situation. It has never been easier to learn syntax, solve surface
level issues, and even troubleshoot certain classes of debugging problems. The
standard approach for debugging is to cut and paste the raw error message into
the Google search engine and click "I'm Feeling Lucky".

These type of problems are related to *Programming in the Small*.  Small issues
require a minimal effort to resolve.   The internet has brought us almost
instantaneous resolution of small issues.  Dealing with tactical issues no
longer requires the bulk of our time as engineers. Software is more than just
programming. *Programming in the Large* requires engineering skill is not
readily available as canned answers on Stack Overflow. Dealing with issues of a
large scope requires a different level of effort.

<hr><p><a href="StartReading">Read More</a></p><hr>
