** Best Practice Leverage

{{ image_water }}


[quote, ~ Wikipedia]
____
"A best practice is a method or technique that has consistently shown results 
superior to those achieved with other means, and that is used as a benchmark."
____



*** Developing Best Practices

Best practices must be developed and aren't an automatic byproduct of creating
software. It requires a concerted effort to build and share software processes
throughout the organization. A significant part of an architect's mindshare
should be applied to how you do the development, not just producing the next
product.

Leverage is the best way to control the cost of developing software. However,
the flaws within our organization and our software may block leverage. Technical
debt prevents us from reusing the knowledge that we already have to produce new
products. So how do we escape this dilemma? By developing a standard set of
practices over time. This leaves us free to fully leverage the solutions that
are already proven.

Our primary objective is to produce the maximum amount of software value for the
lowest cost. If software is simply a repeated act of problem solving, then the
cost of the software is related to the number and complexity of the problems
that we choose to solve.


**** Pay Off Technical Debt

With a heavy load of technical debt, each problem that we attempt to solve is
difficult. The remaining defects, missing tests, inappropriate data structures
and interfaces, all work against us. It can become quite difficult to even read
and understand the code. In the extreme cases, it can become virtually
impossible to maintain the code. Have you ever been on a project where there was
no one available with the knowledge of how to modify the code successfully? At
that point the code is no longer maintainable. The cost of maintenance is now
higher than the cost of replacement.

There are techniques that will prevent this situation from occurring and the
same methods can be used for restoring health to bad software. They can be
learned and applied by any developer.

Technical debt is the problem and implementing best practices is the solution.
Each ailment has a remedy; each problem has a solution. A best practice is a
recipe for solving a certain problem by applying a known solution.


**** Capture Recurring Solutions

As we explore the problems and solutions you will learn how to build your own
catalog of best practices. Consider the catalog offered in this book as a
starter kit on which you can build upon. Use the ones that work for you
directly, modify others, and reject the ones that don't make sense for you.
Going through this tutorial will sharpen your awareness of software development
practices.

As you build your own catalog, share your ideas with your team and with other
people too. By learning and teaching best practices, your influence will
transform and expand your leadership role. People will eventually begin to
notice where all of the best ideas are coming from. Most organizations are in
desperate need of this type of leadership.


**** Catalog of Best Practice

A central repository for standard solutions and best practices is essential.
Eventually you will build out a large system to track all of your practices but
this will take years. It is best to start small with a simple solution.

Each practice can be documented with a simple text template for the key aspects
of the practice:

* Problem - What is the issue that is being solved?  When should this be used?
* Solution - What are the key elements that need to be applied?
* Discussion - What are common issues, variations, and limitations?

Start with a very simple template to encourage engineers to write the practices
down. Remove every excuse and barrier that might prevent someone from
contributing. Once a solution is identified for a particular problem it should
be the standard answer for all future problems of that type. It is important for
the best practices to be shared and universally applied. Otherwise, you are
putting effort into a system that generates no value to the business.

If someone uses a different solution you have three possible responses:

* Add the new solution to the catalog
* Modify the existing solution to include the new twist
* Replace the approved solution with the new one


**** Best Practice Collaboration

The system must be easily searchable. A text search and a tagging system makes
