** Technology Leverage

{{ image_water }}


[quote, ~ Gautama Buddha]
____

"If you do not change direction, you may end up where you are heading."
____


*** Technology Provides Leverage

Software development is about solving problems. Sometimes this requires building 
an entire solution from scratch, but more often your solution will be built on
top of existing technology that solves many of the problems for you.  

Technology selection is really a form of leverage - you are using existing
software to produce a solution without having to build your own software for the
same purpose. A single tool may reflect the knowledge of thousands of hours of
careful thought and development. When you build your own tool without
considering an existing solution you may be duplicating problems that others
have solved well.

This chapter will focus solely on how to optimize the selection process so that
every project gets a boost from the use of a great tool set.

**** How Technology Selection Affects Leverage

Every solution that we build is based on some supporting technologies. This
makes decisions about technology selection critical to the success of every
project. Many organizations fail to give the technology selection the
attention it deserves and some decisions are made arbitrarily.

Choosing good technology can give a project an extra boost. A stable set of
technologies is important for ongoing productivity. Switching technologies too
often can have a detrimental effect on the project because of the learning curve
involved. The reverse is true as well - continued use of old technology when new
tools could provide a ten times boost in productivity can doom a company.
Leverage requires careful management and timing of technology changes.

**** Standardize on Great Tools

When you find a suitable standard solution - use it as much as possible. Only
build your own technology when you can't find a workable solution from somewhere
else. Building your own tools will cost you roughly ten times the amount of
using existing tools.

Fill the gaps in your tool set by being intentional about looking for new tools.
Make a list of the problems that you have yet to solve and then look for tools
that have already solved this problem well. An architect often has to think more
like a consultant and less like a programmer when approaching tool selection.

Tools enable leverage, either directly or indirectly. When you write your own
software, you must create your own leverage. First you define the simple
solution and then you expand it to a more general case. A tool might be able to
solve your simple problem and it is much more likely to get you to the
sophisticated solution even more quickly. For years, every team I worked on
wanted to build an issues tracking database. This offered no value to the
project and consumed a lot of effort.

Your company should have a system to manage the common knowledge that engineers
can draw on when solving any problem. Technology selection, usage, limitations,
cookbooks, processes, and tutorials should all be available to everyone in your
organization. An engineer should be able to quickly query and obtain any
information related to any problem. This system should offer the definitive
answer to each technical problem.

Applying a well-known solution is easy but as you begin to use new tools you
must understand the assumptions that are embedded in the tool. Junior engineers
often misapply powerful tools with disastrous consequences. There is no
substitute for truly understanding what the tool is doing. To have a beneficial
result you must know the limitations and circumstances required for success. A
chainsaw is a great tool in the hands of a skilled craftsman but can create a
disaster when wielded by a novice.


**** Getting the Most from Technology

When selecting technology, be intentional about your choices and trade-offs -
don't make the decision lightly. Create a team of reviewers and work toward a
consensus on the tool selection - don't try to rush the process to closure. The
following technology attributes will mean the difference between success and
failure.

* Flexibility - How adaptable is this process and when does it break?
* Scalability - Does the solution work at different sizes?
* Extensibility - How can the process be adapted to new situations?
* Dependencies - What are the key linkages to other processes?
* Learning Curve - How difficult is it to get people properly trained?
* Usability - Is it difficult to use even after thorough training?
* Reliability - Can you count on predictable results or is it hit and miss?
* Localization - How can the process be adapted to more specialized usage?
* Performance - How can the efficiency be improved to yield a higher ROI?
* Longevity - Is this a sustainable process?

Recall our earlier discussion of NIH Syndrome (Not Invented Here). This
functional disorder results in engineers compulsively reinventing solutions that
already exist. There is usually a case made for some attribute that is missing
