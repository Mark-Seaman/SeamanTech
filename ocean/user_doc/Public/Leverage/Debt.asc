== Technical Debt

{{ image_water }}


[quote, ~ Bill Hewlett]
____
"We wished to operate, as much as possible, on a pay-as-you-go basis, 
that our growth be financed by our earnings and not by debt."
____



=== Understanding Technical Debt

Technical debt is a lot like like financial debt. Tech giants Bill Hewlett and
David Packard decided on a very controversial path by rejecting using debt to
grow their business. This counter-cultural stance contributed significantly to
the financial stability and success of HP. As architects, we must also make a
similar stand to protect our systems from the Siren's call of easy results at
the expense of technical debt and the resulting rapid decay.

Before we can figure out how to decrease the technical debt on a project we have
to find it. Martin Fowler's classic book, "Refactoring: Improving the Design of
Existing Code", provided us with excellent advice on how to keep our code clean.

His analogy is when cleaning house we use our nose to detect bad smells that
need to be addressed. We can learn to detect bad things within our code by
learning to identify the bad smells. This is certainly true of old code but it
can also be generalized to the broader scope of project debt. Some projects may
have very little code debt and massive planning debt. Learning to recognize the
full range of bad smells that emanate from a project is a valuable skill.


==== Problem Solving Dynamics

Debt starts with a problem. Engineers can often solve a single problem in an
hour. This means that an engineer can solve roughly 2,000 problems every year.
But what if the project calls for you to solve 4000 problems every year?

Problems happen in every domain and they all compete for a limited bank of mindshare:

* Definition of the product
* Implementation of new features
* Writing tests
* Supervising the test execution
* Sending out early marketing units
* Attending mandatory corporate training sessions
* Writing TPS reports
* Reporting scrum status
