* Lightweight Planning *                                    -*- muse -*-

A lot of projects fail because of too much planning.  Or to be more precise, to much of the wrong
type of planning.  Consider taking a minimalistic approach to project planning.

About fifteen years ago software managers began recognizing the need to be more agile with project
plans.  The same lessons learned in software planning can be applied broadly to any type of project.

The traditional software project in 2000 was started by writing a series of books about what would
happen on the project.   The first book predicted the business value that would be satisfied and the
resources that would be required to accomplish those goals.

The second book was much larger.  It told the story of how all of the parts of the system would
function, while a third book told the story of how the system would be constructed.  A fourth book
would tell the story of how to make sure that the system was built according to the first three books.

Enormous effort was required to create these books.   As much as 35% of the entire software budget
would be consumed before any progress was made on the actual system.

Because so much energy went into the books it became very difficult to convince anyone that the
books were not sacred.  The core problem was that important decisions were made at the time in the
project when the least was known.

The books are a complete description of an unknown future.  Worse, the book describe an unknowable
future. 

Agile software is based on a set of principles that dictate how we behave.  One princple calls for
building the system in small pieces so the actual customers can use it and give feedback.  Another
principle calls for testing everything as you go instead of at the end.

Now consider your world.  Do you make important decisions at the start of the project when you know
the least?  Or do you buid flexible plans that can easily be altered based on actual experience and
feedback?

The biggest lesson we can learn from agile software is that it is better to concentrate on feedback
and testing than it is to try to predict the future.   Adaptability is what makes humans great.  Why
not build that trait into your next project?


Principles of agility
  * Incrementally develop and test
  * Ruthless prioritization
  * Finish something immediately 
  * Test everything, trust nothing
